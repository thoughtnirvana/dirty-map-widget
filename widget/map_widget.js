// Generated by CoffeeScript 1.4.0
(function() {

  $.fn.extend({
    mapList: function(data) {
      var LatLng, bounds, cam_button_in_focus_background_color, cam_button_out_focus_background_color, cam_description_in_focus_color, cam_description_out_focus_color, cam_location_in_focus_color, cam_location_out_focus_color, data_hash, fnout, fnover, i, infoHtml, infoWindow, infoWindowContent, latlong, li_element, li_elements, map, mapOptions, marker, marker_array, pos, _i, _j, _ref, _ref1;
      if ($("#map-widget-css").length === 0) {
        $('head').append("<link id='map-widget-css' rel='stylesheet' type='text/css' href='../widget/map_widget.css'>");
      }
      if (data === void 0) {
        data = [];
        li_elements = this[0].getElementsByTagName('li');
        for (i = _i = 0, _ref = li_elements.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          li_element = li_elements[i];
          data_hash = {};
          $(li_element).css('display', 'none');
          data_hash['actionUrl'] = li_element.getAttribute('data-action-url');
          data_hash['img'] = li_element.getAttribute('data-img');
          latlong = li_element.getAttribute('data-latlong').split(/[\[,\]]/).filter(function(el) {
            return el.length > 0;
          });
          data_hash['latlong'] = latlong.map(function(el) {
            return parseFloat(el);
          });
          data_hash['location'] = li_element.getAttribute('data-location');
          data_hash['price'] = li_element.getAttribute('data-price');
          data_hash['description'] = li_element.innerText;
          data.push(data_hash);
        }
      }
      this.css('margin-top', '2%');
      this.css('margin-left', '2%');
      this.css('height', '90%');
      this.css('width', '92%');
      this.css('padding', '1%');
      this.css('border-style', 'solid');
      this.css('border-color', 'gray');
      this.css('border-width', '1px');
      this.append("<div id='map-list'></div>");
      this.append("<div id='camera-list'></div>");
      cam_description_in_focus_color = 'white';
      cam_button_in_focus_background_color = '#F88017';
      cam_location_in_focus_color = '#38ACEC';
      cam_description_out_focus_color = '#1874CD';
      cam_button_out_focus_background_color = '#1874CD';
      cam_location_out_focus_color = 'darkgrey';
      infoWindow = new google.maps.InfoWindow({
        size: new google.maps.Size(50, 50)
      });
      LatLng = new google.maps.LatLng(37.7930944, -122.4169949);
      mapOptions = {
        center: LatLng,
        zoom: 16,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map($("#map-list")[0], mapOptions);
      bounds = new google.maps.LatLngBounds();
      marker_array = [];
      for (i = _j = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        infoHtml = ("<div id='unique-" + i + "' class='parent'><div class='left'>") + ("<div class='left-background'><img height='75' width='75' class='cam-img' src=" + data[i].img) + ("></img><p class='cam-price'>" + data[i].price) + ("</p></div></div><div class='right'><p class='cam-description'>" + data[i].description + "</p>") + ("<p class='cam-location'>" + data[i].location + "</p>") + ("<a href=" + data[i].actionUrl + "><button class='cam-button'>Rent</button></a></div></div>");
        $('#camera-list').append(infoHtml);
        infoWindowContent = ("<p class='cam-description'>" + data[i].description + "</p>") + ("<p class='cam-location'>" + data[i].location + "</p>") + ("<p class='cam-price'>" + data[i].price);
        pos = new google.maps.LatLng(data[i].latlong[0], data[i].latlong[1]);
        marker = new google.maps.Marker({
          position: pos,
          animation: google.maps.Animation.DROP,
          title: data[i].location,
          class_name: data[i].actionUrl,
          unique_id: "unique-" + i
        });
        marker.setMap(map);
        google.maps.event.addListener(marker, 'click', (function(marker, infoWindowContent, infoWindow) {
          return function() {
            var element, _fn, _k, _len, _ref2;
            infoWindow.setContent(infoWindowContent);
            infoWindow.open(map, marker);
            _ref2 = $("#camera-list")[0].getElementsByClassName('parent');
            _fn = function(element) {
              return fnout.call(element);
            };
            for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
              element = _ref2[_k];
              _fn(element);
            }
            fnover.call($("#" + this.unique_id)[0]);
            return $('#camera-list').animate({
              scrollTop: $("#" + this.unique_id).offset().top + 'px'
            }, 'fast');
          };
        })(marker, infoWindowContent, infoWindow));
        marker_array.push(marker);
        bounds.extend(pos);
      }
      map.fitBounds(bounds);
      fnover = function() {
        $(this).css('background-color', '#1874CD');
        $(this.getElementsByClassName('cam-description')[0]).css('color', cam_description_in_focus_color);
        $(this.getElementsByClassName('cam-button')[0]).css('background-color', cam_button_in_focus_background_color);
        return $(this.getElementsByClassName('cam-location')[0]).css('color', cam_location_in_focus_color);
      };
      fnout = function() {
        $(this).css('background-color', 'white');
        $(this.getElementsByClassName('cam-description')[0]).css('color', cam_description_out_focus_color);
        $(this.getElementsByClassName('cam-button')[0]).css('background-color', cam_button_out_focus_background_color);
        return $(this.getElementsByClassName('cam-location')[0]).css('color', cam_location_out_focus_color);
      };
      $('.parent').hover(fnover, fnout);
      $('.parent').click(function() {
        var parent_id, _k, _len;
        parent_id = this.id;
        for (_k = 0, _len = marker_array.length; _k < _len; _k++) {
          i = marker_array[_k];
          if (parent_id === i.unique_id) {
            google.maps.event.trigger(i, 'click');
            break;
          }
        }
        return fnover.call(this);
      });
      return this;
    }
  });

}).call(this);
